{"pageProps":{"note":{"id":"6jal7oacj8b4p1cg6aluj7v","title":"Mesh Parameterization","desc":"","updated":1650432688323,"created":1649923330976,"custom":{},"fname":"code-read.igl.mesh-parameterization","type":"note","vault":{"fsPath":"vault"},"contentHash":"d0e4f227878f154d802cd0e14ec81348","links":[{"type":"wiki","from":{"fname":"code-read.igl.mesh-parameterization","id":"6jal7oacj8b4p1cg6aluj7v","vaultName":"vault"},"value":"code-read.igl.neighbourhood-connectivity","alias":"vertex_triangle_adjacency","position":{"start":{"line":3,"column":12,"offset":30},"end":{"line":3,"column":108,"offset":126},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"code-read.igl.neighbourhood-connectivity","anchorHeader":"vertex_triangle_adjacency"}},{"type":"wiki","from":{"fname":"code-read.igl.mesh-parameterization","id":"6jal7oacj8b4p1cg6aluj7v","vaultName":"vault"},"value":"code-read.igl.mesh-parameterization","alias":"triangle_triangle_adjacency","position":{"start":{"line":4,"column":12,"offset":138},"end":{"line":4,"column":107,"offset":233},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"code-read.igl.mesh-parameterization","anchorHeader":"triangle_triangle_adjacency"}},{"type":"wiki","from":{"fname":"code-read.igl.mesh-parameterization","id":"6jal7oacj8b4p1cg6aluj7v","vaultName":"vault"},"value":"code-read.igl.mesh-parameterization","alias":"is_border_vertex","position":{"start":{"line":5,"column":12,"offset":245},"end":{"line":5,"column":85,"offset":318},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"code-read.igl.mesh-parameterization","anchorHeader":"is_border_vertex"}},{"type":"wiki","from":{"fname":"code-read.igl.mesh-parameterization","id":"6jal7oacj8b4p1cg6aluj7v","vaultName":"vault"},"value":"code-read.igl.neighbourhood-connectivity","alias":"vertex_triangle_adjacency","position":{"start":{"line":18,"column":12,"offset":719},"end":{"line":18,"column":108,"offset":815},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"code-read.igl.neighbourhood-connectivity","anchorHeader":"vertex_triangle_adjacency"}},{"type":"wiki","from":{"fname":"code-read.igl.mesh-parameterization","id":"6jal7oacj8b4p1cg6aluj7v","vaultName":"vault"},"value":"code-read.igl.mesh-parameterization","alias":"triangle_triangle_adjacency","position":{"start":{"line":44,"column":12,"offset":1769},"end":{"line":44,"column":107,"offset":1864},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"code-read.igl.mesh-parameterization","anchorHeader":"triangle_triangle_adjacency"}},{"type":"wiki","from":{"fname":"code-read.igl.mesh-parameterization","id":"6jal7oacj8b4p1cg6aluj7v","vaultName":"vault"},"value":"linear-algebra.cross-product","alias":"Properties","position":{"start":{"line":62,"column":91,"offset":2458},"end":{"line":62,"column":145,"offset":2512},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"linear-algebra.cross-product","anchorHeader":"properties"}},{"from":{"fname":"geometry.mesh-deformation","vaultName":"vault"},"type":"backlink","position":{"start":{"line":48,"column":76,"offset":1769},"end":{"line":48,"column":125,"offset":1818},"indent":[]},"value":"code-read.igl.mesh-parameterization","alias":"grad"}],"anchors":{"boundary_loop":{"type":"header","text":"boundary_loop","value":"boundary_loop","line":8,"column":0,"depth":3},"triangle_triangle_adjacency":{"type":"header","text":"triangle_triangle_adjacency","value":"triangle_triangle_adjacency","line":23,"column":0,"depth":3},"is_border_vertex":{"type":"header","text":"is_border_vertex","value":"is_border_vertex","line":49,"column":0,"depth":3},"map_vertices_to_circle":{"type":"header","text":"map_vertices_to_circle","value":"map_vertices_to_circle","line":53,"column":0,"depth":3},"local_basis":{"type":"header","text":"local_basis","value":"local_basis","line":58,"column":0,"depth":3},"grad":{"type":"header","text":"grad","value":"grad","line":66,"column":0,"depth":3},"todo":{"type":"header","text":"TODO","value":"todo","line":88,"column":0,"depth":2}},"children":[],"parent":"40bub3uyyulxmaw57e9ntnv","data":{}},"body":"<h1 id=\"mesh-parameterization\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#mesh-parameterization\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Mesh Parameterization</h1>\n<h3 id=\"boundary_loop\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#boundary_loop\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>boundary_loop</h3>\n<ol>\n<li>Compute <a href=\"/my-personal-knowledge-cache/notes/ww8z42lj1f2cm9lj0yx3ubc#vertex_triangle_adjacency\">vertex_triangle_adjacency</a></li>\n<li>Compute <a href=\"/my-personal-knowledge-cache/notes/6jal7oacj8b4p1cg6aluj7v#triangle_triangle_adjacency\">triangle_triangle_adjacency</a></li>\n<li>Compute <a href=\"/my-personal-knowledge-cache/notes/6jal7oacj8b4p1cg6aluj7v#is_border_vertex\">is_border_vertex</a>, create a set for all border vertices</li>\n<li>Perform breadth-first-search to traverse border vertice till the edge loop is found. </li>\n</ol>\n<pre><code>enqueue one border vertex\nwhile not finished:\n    dequeue latest border vertex\n    for all its incident triangles:\n        if the triangle contains boundary edge:\n            enqueue the other vertex of the border edge\n</code></pre>\n<h3 id=\"triangle_triangle_adjacency\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#triangle_triangle_adjacency\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>triangle_triangle_adjacency</h3>\n<ol>\n<li>Compute <a href=\"/my-personal-knowledge-cache/notes/ww8z42lj1f2cm9lj0yx3ubc#vertex_triangle_adjacency\">vertex_triangle_adjacency</a></li>\n<li>Compute adjacency matrix <code>TT</code> (face index -> index of adjacent face)</li>\n</ol>\n<pre><code>for each face for each corner vertex in face:\n    vi: current vertex\n    vin: next vertex in current face\n    for all incident faces of vi:\n        if incident face index does not equal to current face index:\n            if that incident face contains vin:\n                that face is adjacent to current face w.r.t. edge [vi vin] (share same edge)             \n</code></pre>\n<ol start=\"3\">\n<li>Compute adjacency matrix <code>TTi</code> (face index -> incident edge index in incident triangle)</li>\n</ol>\n<pre><code>for each face for each corner vertex in face:\n    vi: current vertex\n    vj: next vertex in current face\n    fn: face adjacent to current face w.r.t. edge [vi vj]\n    if fn exists:\n        for each corner vertex of fn:\n            vin: current vertex in fn\n            vjn: next vertex in fn\n            if edge [vjn, vin] is [vi vj]:\n                record corner vertex index\n</code></pre>\n<h3 id=\"is_border_vertex\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#is_border_vertex\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>is_border_vertex</h3>\n<ol>\n<li>Compute <a href=\"/my-personal-knowledge-cache/notes/6jal7oacj8b4p1cg6aluj7v#triangle_triangle_adjacency\">triangle_triangle_adjacency</a></li>\n<li>Find edge of triangle that has not incident triangle, the two vertices of that edge are border vertices</li>\n</ol>\n<h3 id=\"map_vertices_to_circle\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#map_vertices_to_circle\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>map_vertices_to_circle</h3>\n<ol>\n<li>Compute cumulated length for each boundary edges</li>\n<li>Treat total length as circumference of a unit circle</li>\n<li>Boundary uv coordinates are then <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo separator=\"true\">,</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(cos, sin)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">cos</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mclose\">)</span></span></span></span></span> of their portion w.r.t. circumference</li>\n</ol>\n<h3 id=\"local_basis\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#local_basis\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>local_basis</h3>\n<pre><code>x = (v_1 - v_0).normalized()\nz = x.cross(v_2 - v_0).normalized()\ny = -x.cross(z).normalized()\n</code></pre>\n<h3 id=\"grad\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#grad\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>grad</h3>\n<ol>\n<li>Compute edge vector <code>v32</code>, <code>v13</code>, <code>v21</code></li>\n<li>Compute normal with cross product and double area with cross product magnitutude. See: <a href=\"/my-personal-knowledge-cache/notes/3h03fva3wzi3haeygd07ylp#properties\">Properties</a></li>\n<li>Normalize normal by double area, or by building a equilateral triangle with double area and recompute normal\n<blockquote>\n<p>Not sure why use equilateral triangle</p>\n</blockquote>\n</li>\n<li>Rotate edge vectors <code>v21</code> and <code>v13</code> 90 degree by performing cross product with normal (So the direction is pointing from vertex to it opposite edge and is also perpendicular to it). Then scale it by double area.</li>\n<li>Build sparse gradient operator matrix <code>3NF x NV</code></li>\n</ol>\n<p>Vector for each vertex in face</p>\n<pre><code>v1: -v13 - v21\nv2: v13\nv3: v21\n</code></pre>\n<p>Stored in data structure like</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th></th><th align=\"center\">NV</th></tr></thead><tbody><tr><td>NF</td><td align=\"center\">x</td></tr><tr><td>NF</td><td align=\"center\">y</td></tr><tr><td>NF</td><td align=\"center\">y</td></tr></tbody></table>\n<h2 id=\"todo\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#todo\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>TODO</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Abstract equilateral triangle for normal computation</li>\n</ul>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/my-personal-knowledge-cache/notes/32xk45x8lisds1ti4bx4h4y\">Mesh Deformation</a></li>\n</ul>","noteIndex":{"id":"o3PkEany5FTDLokev2jkJ","title":"Root","desc":"","updated":1656832289330,"created":1640014633146,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"1f4a8dbd787743b10f24422968be02a9","links":[],"anchors":{"history":{"type":"header","text":"History","value":"history","line":10,"column":0,"depth":2},"disclaimer":{"type":"header","text":"Disclaimer","value":"disclaimer","line":15,"column":0,"depth":2}},"children":["Vn1Ykq4aIagi0bhZowkgD","ja5HFaIxVEtbZoTklNXfZ","vnzxfoqb6aqbrqy247uonqo","jjlv4wd30bvf0r680o9ptbi","kok8aerdrzko8v4i6w6qtjx","hr8ruqfxd2miwldyehzz5zy","criy8usqjrguecufwb3k8z2","3x9f9wclumzxc23dzgraepy","sma2hkp8hvq9urmtk94qqwq","4bcvwahaynsox941d8dimxw","8u19znq05xj50ptse0fq8nj","hbcft05imtwxxtwk52nij1n","2vmt81onv3jf06ejwfusj30","npuhs4xvm0sa31rz2gcuff3","mwt2mrjm58oa3q2osoqwd64","yjnf5fuac95jbdmjj923hyh","17p3nbv4rvga83hhsz2idzp","8r1egy8mz3lp7ud9p8kcg8z","5gf8xb68r1y0kxumkvvmuez","d92qhaqtfbt7e4eximdnbht","r25bm5nuug9krur6ddqearm"],"parent":null,"data":{},"body":"\nMy personal knowledge cache using [Dendron](https://www.dendron.so)\n\n## History\nIt was during my first job, at the start-up company called PixelShift.AI, that I acquired most prominent skill as a software engineer-the ability to read source code. It opened up a new way of learning and my knowledge expanded rapidly ever since. Learning new things is thriving but noting them down cogently and organized is hard. I often found myself forget the context few month later, making the notes completely intelligible. Additionally, some notes need frequent update as my previous understanding could be parochial, antiquated or even erroneous.\n\nIn desperate attempt to facilitate the noting/updating experience, I came across [Dendron](https://www.dendron.so) and found it surprisingly congenial to my personal need. With it, I have gradually grown the habit of caching, linking back and extending my knowledge base.\n\n## Disclaimer\nThe notes are collections of information I found along the journey. I use backquote to denote sources, but I am likely to miss some references, so apology in advance. Also, they are my personal understandings, usually added when I first encounter the topic and will be updated only when I come across it again, so some of them could be incomplete or wrong."},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.86.1","enableFullHierarchyNoteTitle":false,"enableHandlebarTemplates":false,"templateHierarchy":"template"},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"writeStubs":false,"seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enablePrettyLinks":true,"assetsPrefix":"/my-personal-knowledge-cache","siteUrl":"https://ankbzpx.github.io","enableTaskNotes":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}