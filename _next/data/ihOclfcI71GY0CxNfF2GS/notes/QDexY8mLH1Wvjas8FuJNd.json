{"pageProps":{"note":{"id":"QDexY8mLH1Wvjas8FuJNd","title":"Function Arguments","desc":"","updated":1641265790783,"created":1641265634714,"custom":{},"fname":"coding.cpp.function-arguments","type":"note","vault":{"fsPath":"vault"},"contentHash":"c1f258a7d7225f25768e1b884f40750e","links":[],"anchors":{"pass-by-value":{"type":"header","text":"Pass by Value","value":"pass-by-value","line":7,"column":0,"depth":2},"pass-by-pointer":{"type":"header","text":"Pass by Pointer","value":"pass-by-pointer","line":20,"column":0,"depth":2},"pass-by-reference":{"type":"header","text":"Pass by Reference","value":"pass-by-reference","line":36,"column":0,"depth":2},"pass-by-address":{"type":"header","text":"Pass by Address","value":"pass-by-address","line":58,"column":0,"depth":2},"pass-address-by-reference":{"type":"header","text":"Pass Address by Reference","value":"pass-address-by-reference","line":71,"column":0,"depth":2}},"children":[],"parent":"qg1xpyydv5x5izjku13ukcz","data":{}},"body":"<h1 id=\"function-arguments\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#function-arguments\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Function Arguments</h1>\n<h2 id=\"pass-by-value\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#pass-by-value\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Pass by Value</h2>\n<p>Values of arguments are firstly copied, with copied values passed to the function, which doesn't change arguments' values</p>\n<pre><code>void add(int x1, int x2){\n  x1 += x2;\n  x2 = 0;\n}\nint a = 1;\nint b = 2;\nadd(a, b); // a is still 1, b is still 2\n</code></pre>\n<h2 id=\"pass-by-pointer\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#pass-by-pointer\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Pass by Pointer</h2>\n<p>Pass pointer holds memory address of variable, will affect argument's value</p>\n<pre><code>void add(int *x1, int *x2){\n  *x1 += *x2; // dereferenced to change value being pointed to\n  *x1 = 0; // dereferenced to change value being pointed to\n}\nint a = 1;\nint b = 2;\nint *aPtr, *bPtr;\naPtr = &#x26;a;\nbPtr = &#x26;b;\nadd(aPtr, bPtr); // a is 3, b is 0\n</code></pre>\n<h2 id=\"pass-by-reference\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#pass-by-reference\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Pass by Reference</h2>\n<p>Pass reference of variable, will affect the argument's value</p>\n<pre><code>void add(int &#x26;x1, int &#x26;x2){\n  x1 += x2;\n  x1 = 0;\n}\nint a = 1;\nint b = 2;\nadd(a, b); // a is 3, b is 0\n</code></pre>\n<p>Google c++ style do <strong>NOT</strong> use pass by reference to modify arguments (use const reference)</p>\n<pre><code>void access(const int x){\n  ...\n}\n\nint a = 1;\naccess(a); // a is 1\n</code></pre>\n<h2 id=\"pass-by-address\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#pass-by-address\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Pass by Address</h2>\n<p>Pass address of argument, affect its value</p>\n<pre><code>void add(int *x1, int *x2){\n  *x1 += *x2; // dereferenced to change value being pointed to\n  *x1 = 0; // dereferenced to change value being pointed to\n}\nint a = 1;\nint b = 2;\nadd(&#x26;a, &#x26;b); // a is 3, b is 0\n</code></pre>\n<h2 id=\"pass-address-by-reference\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#pass-address-by-reference\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Pass Address by Reference</h2>\n<p>Change address of argument within the function</p>\n<pre><code>void SetToNull(int *&#x26;ptr){ // reference to pointer\n  ptr = nullptr;\n}\nint five = 5;\nint *ptr = &#x26;five; // pointer holds address of five\nstd::cout &#x3C;&#x3C; *ptr; // dereference, print 5, the value at address of five\nSetToNull(ptr); // pointer changed to null pointer\n</code></pre>\n<p>In Google c++ style, use ** to dereference twice</p>","noteIndex":{"id":"o3PkEany5FTDLokev2jkJ","title":"Root","desc":"","updated":1656832289330,"created":1640014633146,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"1f4a8dbd787743b10f24422968be02a9","links":[],"anchors":{"history":{"type":"header","text":"History","value":"history","line":10,"column":0,"depth":2},"disclaimer":{"type":"header","text":"Disclaimer","value":"disclaimer","line":15,"column":0,"depth":2}},"children":["Vn1Ykq4aIagi0bhZowkgD","ja5HFaIxVEtbZoTklNXfZ","vnzxfoqb6aqbrqy247uonqo","jjlv4wd30bvf0r680o9ptbi","kok8aerdrzko8v4i6w6qtjx","hr8ruqfxd2miwldyehzz5zy","criy8usqjrguecufwb3k8z2","3x9f9wclumzxc23dzgraepy","sma2hkp8hvq9urmtk94qqwq","4bcvwahaynsox941d8dimxw","8u19znq05xj50ptse0fq8nj","hbcft05imtwxxtwk52nij1n","2vmt81onv3jf06ejwfusj30","npuhs4xvm0sa31rz2gcuff3","mwt2mrjm58oa3q2osoqwd64","yjnf5fuac95jbdmjj923hyh","17p3nbv4rvga83hhsz2idzp","8r1egy8mz3lp7ud9p8kcg8z","5gf8xb68r1y0kxumkvvmuez","d92qhaqtfbt7e4eximdnbht","r25bm5nuug9krur6ddqearm"],"parent":null,"data":{},"body":"\nMy personal knowledge cache using [Dendron](https://www.dendron.so)\n\n## History\nIt was during my first job, at the start-up company called PixelShift.AI, that I acquired most prominent skill as a software engineer-the ability to read source code. It opened up a new way of learning and my knowledge expanded rapidly ever since. Learning new things is thriving but noting them down cogently and organized is hard. I often found myself forget the context few month later, making the notes completely intelligible. Additionally, some notes need frequent update as my previous understanding could be parochial, antiquated or even erroneous.\n\nIn desperate attempt to facilitate the noting/updating experience, I came across [Dendron](https://www.dendron.so) and found it surprisingly congenial to my personal need. With it, I have gradually grown the habit of caching, linking back and extending my knowledge base.\n\n## Disclaimer\nThe notes are collections of information I found along the journey. I use backquote to denote sources, but I am likely to miss some references, so apology in advance. Also, they are my personal understandings, usually added when I first encounter the topic and will be updated only when I come across it again, so some of them could be incomplete or wrong."},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.86.1","enableFullHierarchyNoteTitle":false,"enableHandlebarTemplates":false,"templateHierarchy":"template"},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"writeStubs":false,"seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enablePrettyLinks":true,"assetsPrefix":"/my-personal-knowledge-cache","siteUrl":"https://ankbzpx.github.io","enableTaskNotes":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}