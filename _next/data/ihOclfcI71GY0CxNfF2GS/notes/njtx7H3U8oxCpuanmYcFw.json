{"pageProps":{"note":{"id":"njtx7H3U8oxCpuanmYcFw","title":"Python API","desc":"","updated":1645692732528,"created":1642932434975,"custom":{},"fname":"coding.blender.python-api","type":"note","vault":{"fsPath":"vault"},"contentHash":"79cd0a37d1b356f9fd7e463badba3e51","links":[{"from":{"fname":"code-read.igl.normal-vector","vaultName":"vault"},"type":"backlink","position":{"start":{"line":50,"column":34,"offset":1102},"end":{"line":50,"column":98,"offset":1166},"indent":[]},"value":"coding.blender.python-api","alias":"Smooth shading in Blender"}],"anchors":{"mesh-ops":{"type":"header","text":"Mesh ops","value":"mesh-ops","line":7,"column":0,"depth":2},"join":{"type":"header","text":"Join","value":"join","line":16,"column":0,"depth":2},"modifier":{"type":"header","text":"Modifier","value":"modifier","line":32,"column":0,"depth":2},"subdivision":{"type":"header","text":"Subdivision","value":"subdivision","line":34,"column":0,"depth":3},"triangulate":{"type":"header","text":"Triangulate","value":"triangulate","line":42,"column":0,"depth":3},"uv":{"type":"header","text":"UV","value":"uv","line":50,"column":0,"depth":2},"material":{"type":"header","text":"Material","value":"material","line":60,"column":0,"depth":2},"bezier-curve":{"type":"header","text":"Bezier curve","value":"bezier-curve","line":78,"column":0,"depth":2},"edge-loop-bevel":{"type":"header","text":"Edge loop bevel","value":"edge-loop-bevel","line":99,"column":0,"depth":2}},"children":["mehe0995foclne4lxh1ncqc"],"parent":"ey1dq1luwd0t64qojkiacaw","data":{}},"body":"<h1 id=\"python-api\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#python-api\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Python API</h1>\n<h2 id=\"mesh-ops\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#mesh-ops\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Mesh ops</h2>\n<pre><code>if bpy.ops.object.mode_set.poll():\n    bpy.ops.object.mode_set(mode=\"EDIT\")\n    bpy.ops.mesh.edge_face_add()\n    bpy.ops.mesh.faces_shade_smooth()\n    bpy.ops.object.mode_set(mode=\"OBJECT\")\n</code></pre>\n<h2 id=\"join\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#join\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Join</h2>\n<pre><code>if bpy.ops.object.mode_set.poll():\n    bpy.ops.object.mode_set(mode=\"OBJECT\")\n    \n    for obj in objs:    \n        obj.select_set(True)\n    \n    # at least one of them needs to be active\n    bpy.context.view_layer.objects.active = objs[0]\n\n    bpy.ops.object.join()\n    obj = bpy.context.selected_objects[0]\n    obj.select_set(False)\n</code></pre>\n<h2 id=\"modifier\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#modifier\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Modifier</h2>\n<h3 id=\"subdivision\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#subdivision\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Subdivision</h3>\n<pre><code>if bpy.ops.object.mode_set.poll():\n    bpy.ops.object.mode_set(mode=\"OBJECT\")\n    bpy.ops.object.subdivision_set()\n    bpy.ops.object.modifier_apply(modifier=\"Subdivision\")\n</code></pre>\n<h3 id=\"triangulate\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#triangulate\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Triangulate</h3>\n<pre><code>if bpy.ops.object.mode_set.poll():\n    bpy.ops.object.mode_set(mode=\"OBJECT\")\n    bpy.ops.object.modifier_add(type=\"TRIANGULATE\")\n    bpy.ops.object.modifier_apply(modifier=\"TRIANGULATE\")\n</code></pre>\n<h2 id=\"uv\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#uv\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>UV</h2>\n<pre><code>uvlayer = mesh.uv_layers.new()\nmesh.uv_layers.active = uvlayer\nfor face in mesh.polygons:\n    for vert_idx, loop_idx in zip(face.vertices, face.loop_indices):\n        uv = np.array(mesh.vertices[vert_idx].co[:2]) / 2.0 + 0.5\n        mesh.uv_layers.active.data[loop_idx].uv = uv\n</code></pre>\n<h2 id=\"material\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#material\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Material</h2>\n<pre><code># load image\nbpy.ops.image.open(filepath=image_path)\n# create bsdf material\nmat = bpy.data.materials.new(image_path)\nmat.use_nodes = True\nfor node in mat.node_tree.nodes:\n    if node.type == \"BSDF_PRINCIPLED\":\n        node.select = True\n        # create image texture\n        image_texture_node = mat.node_tree.nodes.new(\"ShaderNodeTexImage\")\n        image_texture_node.image = bpy.data.images[image_path]\n        # assign image texture to bsdf base color\n        mat.node_tree.links.new(node.inputs['Base Color'], image_texture_node.outputs['Color'])\nmesh.materials.append(mat)\n</code></pre>\n<h2 id=\"bezier-curve\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#bezier-curve\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Bezier curve</h2>\n<pre><code>def create_bezier_curve_object(name, bpts, scale=1.0):\n    curve_data = bpy.data.curves.new(name, 'CURVE')\n    bevel_obj = bpy.data.objects.new(name, curve_data)\n    bpy.context.collection.objects.link(bevel_obj)\n\n    num_of_bpts = int(len(bpts) / 3)\n    polyline = curve_data.splines.new('BEZIER')\n\n    # bezier spline is initialized with one bezier_point\n    polyline.bezier_points.add(num_of_bpts - 1)\n    to_pt3 = lambda pt2: [scale * pt2['x'], -scale * pt2['y'], 0]\n    for i in range(num_of_bpts):\n        polyline.bezier_points[i].co = to_pt3(bpts[3 * i])\n        polyline.bezier_points[i].handle_left_type = 'ALIGNED'\n        polyline.bezier_points[i].handle_left = to_pt3(bpts[3 * i + 1])\n        polyline.bezier_points[i].handle_right_type = 'ALIGNED'\n        polyline.bezier_points[i].handle_right = to_pt3(bpts[3 * i + 2])\n</code></pre>\n<h2 id=\"edge-loop-bevel\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#edge-loop-bevel\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Edge loop bevel</h2>\n<pre><code>obj.select_set(True)\nbpy.ops.object.convert(target='CURVE')\nbpy.data.curves[name].bevel_mode = 'OBJECT'\nbpy.data.curves[name].bevel_object = bpy.data.objects[BEVEL_OBJECT_NAME]\nbpy.ops.object.convert(target='MESH')\nobj.select_set(False)\n</code></pre>\n<hr>\n<strong>Children</strong>\n<ol>\n<li><a href=\"/my-personal-knowledge-cache/notes/mehe0995foclne4lxh1ncqc\">Parallelism</a></li>\n</ol>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/my-personal-knowledge-cache/notes/edudwmtuufpqosp7ztuwddr\">Normal Vector</a></li>\n</ul>","noteIndex":{"id":"o3PkEany5FTDLokev2jkJ","title":"Root","desc":"","updated":1656832289330,"created":1640014633146,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"1f4a8dbd787743b10f24422968be02a9","links":[],"anchors":{"history":{"type":"header","text":"History","value":"history","line":10,"column":0,"depth":2},"disclaimer":{"type":"header","text":"Disclaimer","value":"disclaimer","line":15,"column":0,"depth":2}},"children":["Vn1Ykq4aIagi0bhZowkgD","ja5HFaIxVEtbZoTklNXfZ","vnzxfoqb6aqbrqy247uonqo","jjlv4wd30bvf0r680o9ptbi","kok8aerdrzko8v4i6w6qtjx","hr8ruqfxd2miwldyehzz5zy","criy8usqjrguecufwb3k8z2","3x9f9wclumzxc23dzgraepy","sma2hkp8hvq9urmtk94qqwq","4bcvwahaynsox941d8dimxw","8u19znq05xj50ptse0fq8nj","hbcft05imtwxxtwk52nij1n","2vmt81onv3jf06ejwfusj30","npuhs4xvm0sa31rz2gcuff3","mwt2mrjm58oa3q2osoqwd64","yjnf5fuac95jbdmjj923hyh","17p3nbv4rvga83hhsz2idzp","8r1egy8mz3lp7ud9p8kcg8z","5gf8xb68r1y0kxumkvvmuez","d92qhaqtfbt7e4eximdnbht","r25bm5nuug9krur6ddqearm"],"parent":null,"data":{},"body":"\nMy personal knowledge cache using [Dendron](https://www.dendron.so)\n\n## History\nIt was during my first job, at the start-up company called PixelShift.AI, that I acquired most prominent skill as a software engineer-the ability to read source code. It opened up a new way of learning and my knowledge expanded rapidly ever since. Learning new things is thriving but noting them down cogently and organized is hard. I often found myself forget the context few month later, making the notes completely intelligible. Additionally, some notes need frequent update as my previous understanding could be parochial, antiquated or even erroneous.\n\nIn desperate attempt to facilitate the noting/updating experience, I came across [Dendron](https://www.dendron.so) and found it surprisingly congenial to my personal need. With it, I have gradually grown the habit of caching, linking back and extending my knowledge base.\n\n## Disclaimer\nThe notes are collections of information I found along the journey. I use backquote to denote sources, but I am likely to miss some references, so apology in advance. Also, they are my personal understandings, usually added when I first encounter the topic and will be updated only when I come across it again, so some of them could be incomplete or wrong."},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.86.1","enableFullHierarchyNoteTitle":false,"enableHandlebarTemplates":false,"templateHierarchy":"template"},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"writeStubs":false,"seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enablePrettyLinks":true,"assetsPrefix":"/my-personal-knowledge-cache","siteUrl":"https://ankbzpx.github.io","enableTaskNotes":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}