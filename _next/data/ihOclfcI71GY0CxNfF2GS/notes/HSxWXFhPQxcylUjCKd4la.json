{"pageProps":{"note":{"id":"HSxWXFhPQxcylUjCKd4la","title":"Container","desc":"","updated":1647839673552,"created":1641262973688,"custom":{},"fname":"coding.cpp.container","type":"note","vault":{"fsPath":"vault"},"contentHash":"c388ad001c4d477bef0908114d76ecd1","links":[{"from":{"fname":"code-read.igl.subdivision","vaultName":"vault"},"type":"backlink","position":{"start":{"line":20,"column":104,"offset":482},"end":{"line":20,"column":164,"offset":542},"indent":[]},"value":"coding.cpp.container","alias":"lexicographically"}],"anchors":{"array":{"type":"header","text":"Array","value":"array","line":8,"column":0,"depth":2},"vector":{"type":"header","text":"Vector","value":"vector","line":31,"column":0,"depth":2},"vector-comparison":{"type":"header","text":"Vector comparison","value":"vector-comparison","line":62,"column":0,"depth":3},"unroll-nested-vector":{"type":"header","text":"Unroll nested vector","value":"unroll-nested-vector","line":67,"column":0,"depth":3}},"children":[],"parent":"qg1xpyydv5x5izjku13ukcz","data":{}},"body":"<h1 id=\"container\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#container\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Container</h1>\n<h2 id=\"array\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#array\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Array</h2>\n<p>Continuous memory locations, number of elements must be constant</p>\n<pre><code>double dArr[10];\nint iArr[] = {1, 2, 3, 4, 5};\nfloat fArr[3] = {1, 2} // omiteed element will be 0\ndArr[0] = 5;\nb = iArr[1] + 2;\nfArr[2] = fArr[0] + fArr[1];\n</code></pre>\n<p>Array name stores the memory address of the first element (can be regarded as a pointer). Modify within the function will affects its values</p>\n<pre><code>int max(int[] a, int size){\n  ...\n}\nint arr[] = {1, 2, 3};\nint *aPtr;\naPtr = arr;\naPtr = &#x26;arr[0];\nstd::cout &#x3C;&#x3C; max(arr, sizeof(arr)/sizeof(int));\n</code></pre>\n<h2 id=\"vector\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#vector\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Vector</h2>\n<p>Continuous memory locations, number of elements can change</p>\n<pre><code>vector&#x3C;int> iVec10;\nvector&#x3C;int> empty;\nvector&#x3C;int> iVec5(1, 2, 3, 4, 5);\nint iArr3[] = {1, 2, 3};\nvector&#x3C;int> iVec3(iArr3, iArr3+3)\n\nint average(vector&#x3C;int> iVec){ // pass by copy, need local copy (Do not use in Google c++ style)\n  ...\n}\n\n// do not change argument, pass by reference\nint average(const vector&#x3C;int> &#x26;iVec){\n  ...\n}\n\n// intend to change argument, pass by pointer\nint average(vector&#x3C;int> *iVec){\n  iVec->size();\n  (*iVec)[0] = 1;\n}\n\n// pass temporary variable (rvalue reference)\nint average(vector&#x3C;int> &#x26;&#x26;iVec){\n ...\n}\n</code></pre>\n<h3 id=\"vector-comparison\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#vector-comparison\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Vector comparison</h3>\n<blockquote>\n<p>Reference: <a href=\"https://en.cppreference.com/w/cpp/container/vector/operator_cmp\">https://en.cppreference.com/w/cpp/container/vector/operator_cmp</a></p>\n</blockquote>\n<p>Similar to `std::lexicographical_compare. compare <a href=\"https://en.wikipedia.org/wiki/Lexicographic_order\">lexicographically</a> (generalized alphabetical order )</p>\n<h3 id=\"unroll-nested-vector\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#unroll-nested-vector\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Unroll nested vector</h3>\n<blockquote>\n<p>Reference: <a href=\"https://stackoverflow.com/questions/20994321/clean-ways-to-write-multiple-for-loops\">https://stackoverflow.com/questions/20994321/clean-ways-to-write-multiple-for-loops</a></p>\n</blockquote>\n<pre><code>grid_dim_X = 10;\ngrid_dim_Y = 20;\ngrid_dim_Z = 30;\nstd::vector&#x3C;int> grid_3d;\ngrid_3d.resize(grid_dim_X * grid_dim_Y * grid_dim_Z);\n\n</code></pre>\n<p>Acess with</p>\n<pre><code>\nauto grid_query = [&#x26;](int, i, int, j, int, k){\n  return grid_3d[(i * grid_dim_X + j) * grid_dim_Y + k];\n};\n</code></pre>\n<p>or</p>\n<pre><code>\nauto grid_query = [&#x26;](int, i, int, j, int, k){\n  return grid_3d[i + grid_dim_X * (j + (grid_dim_Y * k))];\n};\n\n</code></pre>\n<p>depends on data storage</p>\n<blockquote>\n<p>Note: for sparse data storage, <code>std::unordered_map</code> would be more efficient</p>\n</blockquote>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/my-personal-knowledge-cache/notes/rofvgoy9bqzswabd2hlhmj0\">Subdivision</a></li>\n</ul>","noteIndex":{"id":"o3PkEany5FTDLokev2jkJ","title":"Root","desc":"","updated":1656832289330,"created":1640014633146,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"1f4a8dbd787743b10f24422968be02a9","links":[],"anchors":{"history":{"type":"header","text":"History","value":"history","line":10,"column":0,"depth":2},"disclaimer":{"type":"header","text":"Disclaimer","value":"disclaimer","line":15,"column":0,"depth":2}},"children":["Vn1Ykq4aIagi0bhZowkgD","ja5HFaIxVEtbZoTklNXfZ","vnzxfoqb6aqbrqy247uonqo","jjlv4wd30bvf0r680o9ptbi","kok8aerdrzko8v4i6w6qtjx","hr8ruqfxd2miwldyehzz5zy","criy8usqjrguecufwb3k8z2","3x9f9wclumzxc23dzgraepy","sma2hkp8hvq9urmtk94qqwq","4bcvwahaynsox941d8dimxw","8u19znq05xj50ptse0fq8nj","hbcft05imtwxxtwk52nij1n","2vmt81onv3jf06ejwfusj30","npuhs4xvm0sa31rz2gcuff3","mwt2mrjm58oa3q2osoqwd64","yjnf5fuac95jbdmjj923hyh","17p3nbv4rvga83hhsz2idzp","8r1egy8mz3lp7ud9p8kcg8z","5gf8xb68r1y0kxumkvvmuez","d92qhaqtfbt7e4eximdnbht","r25bm5nuug9krur6ddqearm"],"parent":null,"data":{},"body":"\nMy personal knowledge cache using [Dendron](https://www.dendron.so)\n\n## History\nIt was during my first job, at the start-up company called PixelShift.AI, that I acquired most prominent skill as a software engineer-the ability to read source code. It opened up a new way of learning and my knowledge expanded rapidly ever since. Learning new things is thriving but noting them down cogently and organized is hard. I often found myself forget the context few month later, making the notes completely intelligible. Additionally, some notes need frequent update as my previous understanding could be parochial, antiquated or even erroneous.\n\nIn desperate attempt to facilitate the noting/updating experience, I came across [Dendron](https://www.dendron.so) and found it surprisingly congenial to my personal need. With it, I have gradually grown the habit of caching, linking back and extending my knowledge base.\n\n## Disclaimer\nThe notes are collections of information I found along the journey. I use backquote to denote sources, but I am likely to miss some references, so apology in advance. Also, they are my personal understandings, usually added when I first encounter the topic and will be updated only when I come across it again, so some of them could be incomplete or wrong."},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.86.1","enableFullHierarchyNoteTitle":false,"enableHandlebarTemplates":false,"templateHierarchy":"template"},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"writeStubs":false,"seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enablePrettyLinks":true,"assetsPrefix":"/my-personal-knowledge-cache","siteUrl":"https://ankbzpx.github.io","enableTaskNotes":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}