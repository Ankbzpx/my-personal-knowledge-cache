{"pageProps":{"note":{"id":"ENcCIAKPucDFA5XTenNT8","title":"Computing Kernel","desc":"","updated":1644733372467,"created":1644732918226,"custom":{},"fname":"metal.computing-kernel","type":"note","vault":{"fsPath":"vault"},"contentHash":"58e14423cb3e0da21baffdcc7879688e","links":[],"anchors":{"example":{"type":"header","text":"Example","value":"example","line":8,"column":0,"depth":2},"shader":{"type":"header","text":"Shader","value":"shader","line":12,"column":0,"depth":3},"usage":{"type":"header","text":"Usage","value":"usage","line":37,"column":0,"depth":3}},"children":[],"parent":"8u19znq05xj50ptse0fq8nj","data":{}},"body":"<h1 id=\"computing-kernel\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#computing-kernel\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Computing Kernel</h1>\n<h2 id=\"example\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#example\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Example</h2>\n<p>Mixing two cubemap texture and write result to another cubemap texture</p>\n<h3 id=\"shader\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#shader\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Shader</h3>\n<blockquote>\n<p>BlendKernel.metal</p>\n</blockquote>\n<pre><code>#include &#x3C;metal_stdlib>\nusing namespace metal;\n\nkernel void\nblendKernel(texturecube&#x3C;half, access::read>  refTexture  [[texture(0)]],\n            texturecube&#x3C;half, access::read>  curTexture  [[texture(1)]],\n            texturecube&#x3C;half, access::write> outTexture [[texture(2)]],\n            constant float&#x26; alpha [[buffer(0)]],\n            uint2 gid [[thread_position_in_grid]])\n{\n    outTexture.write(mix(refTexture.read(gid, 0), curTexture.read(gid, 0), alpha), gid, 0);\n    outTexture.write(mix(refTexture.read(gid, 1), curTexture.read(gid, 1), alpha), gid, 1);\n    outTexture.write(mix(refTexture.read(gid, 2), curTexture.read(gid, 2), alpha), gid, 2);\n    outTexture.write(mix(refTexture.read(gid, 3), curTexture.read(gid, 3), alpha), gid, 3);\n    outTexture.write(mix(refTexture.read(gid, 4), curTexture.read(gid, 4), alpha), gid, 4);\n    outTexture.write(mix(refTexture.read(gid, 5), curTexture.read(gid, 5), alpha), gid, 5);\n}\n\n</code></pre>\n<h3 id=\"usage\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#usage\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Usage</h3>\n<pre><code>guard let commandQueue = device.makeCommandQueue() else { fatalError(\"Failed to create command queue\") }\nlet defaultLibrary = device.makeDefaultLibrary()\nlet kernelFunction = defaultLibrary?.makeFunction(name: \"blendKernel\")\ndo {\n    try computePipelineState =\n    device.makeComputePipelineState(function: kernelFunction!)} catch {\n        fatalError(\"Failed to create compute kernel pipeline state\")\n}\n\nlet envTextureDescriptor = MTLTextureDescriptor()\nenvTextureDescriptor.textureType = .typeCube\nenvTextureDescriptor.pixelFormat = .rgba16Float\nenvTextureDescriptor.width = width\nenvTextureDescriptor.height = height\nenvTextureDescriptor.depth = 1\nenvTextureDescriptor.arrayLength = 1\nenvTextureDescriptor.mipmapLevelCount = 9\nenvTextureDescriptor.sampleCount = 1\nenvTextureDescriptor.usage = [.shaderRead, .shaderWrite]\n\nlet refEnvTexture = self.device.makeTexture(descriptor: envTextureDescriptor)!\nlet curEnvTexture = self.device.makeTexture(descriptor: envTextureDescriptor)!\nlet outEnvTexture = self.device.makeTexture(descriptor: envTextureDescriptor)!\n\n\n// Set the compute kernel's threadgroup size to 16 x 16.\nthreadgroupSize = MTLSize(width: 16, height: 16, depth: 1)\nthreadgroupCount = MTLSize()\n// Calculate the number of rows and columns of threadgroups given the size of the\n// input image. Ensure that the grid covers the entire image (or more).\nthreadgroupCount.width  = (envTextureDescriptor.width + threadgroupSize.width - 1)\n                            / threadgroupSize.width\nthreadgroupCount.height = (envTextureDescriptor.height + threadgroupSize.height - 1)\n                            / threadgroupSize.height\n// The image data is 2D, so set depth to 1.\nthreadgroupCount.depth = envTextureDescriptor.depth\n\n\nlet commandBuffer = commandQueue.makeCommandBuffer()\nlet computeEncoder = commandBuffer?.makeComputeCommandEncoder()\ncomputeEncoder?.setComputePipelineState(computePipelineState)\ncomputeEncoder?.setTexture(refEnvTexture, index: 0)\ncomputeEncoder?.setTexture(curEnvTexture, index: 1)\ncomputeEncoder?.setTexture(outEnvTexture, index: 2)\ncomputeEncoder?.setBytes(&#x26;alpha, length: MemoryLayout.size(ofValue: alpha), index: 0)\ncomputeEncoder?.dispatchThreadgroups(threadgroupCount, threadsPerThreadgroup: threadgroupSize)\ncomputeEncoder?.endEncoding()\nlet blitEncoder = commandBuffer?.makeBlitCommandEncoder()\nblitEncoder?.generateMipmaps(for: outEnvTexture)\nblitEncoder?.endEncoding()\ncommandBuffer?.commit()\n</code></pre>","noteIndex":{"id":"o3PkEany5FTDLokev2jkJ","title":"Root","desc":"","updated":1656832289330,"created":1640014633146,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"1f4a8dbd787743b10f24422968be02a9","links":[],"anchors":{"history":{"type":"header","text":"History","value":"history","line":10,"column":0,"depth":2},"disclaimer":{"type":"header","text":"Disclaimer","value":"disclaimer","line":15,"column":0,"depth":2}},"children":["Vn1Ykq4aIagi0bhZowkgD","ja5HFaIxVEtbZoTklNXfZ","vnzxfoqb6aqbrqy247uonqo","jjlv4wd30bvf0r680o9ptbi","kok8aerdrzko8v4i6w6qtjx","hr8ruqfxd2miwldyehzz5zy","criy8usqjrguecufwb3k8z2","3x9f9wclumzxc23dzgraepy","sma2hkp8hvq9urmtk94qqwq","4bcvwahaynsox941d8dimxw","8u19znq05xj50ptse0fq8nj","hbcft05imtwxxtwk52nij1n","2vmt81onv3jf06ejwfusj30","npuhs4xvm0sa31rz2gcuff3","mwt2mrjm58oa3q2osoqwd64","yjnf5fuac95jbdmjj923hyh","17p3nbv4rvga83hhsz2idzp","8r1egy8mz3lp7ud9p8kcg8z","5gf8xb68r1y0kxumkvvmuez","d92qhaqtfbt7e4eximdnbht","r25bm5nuug9krur6ddqearm"],"parent":null,"data":{},"body":"\nMy personal knowledge cache using [Dendron](https://www.dendron.so)\n\n## History\nIt was during my first job, at the start-up company called PixelShift.AI, that I acquired most prominent skill as a software engineer-the ability to read source code. It opened up a new way of learning and my knowledge expanded rapidly ever since. Learning new things is thriving but noting them down cogently and organized is hard. I often found myself forget the context few month later, making the notes completely intelligible. Additionally, some notes need frequent update as my previous understanding could be parochial, antiquated or even erroneous.\n\nIn desperate attempt to facilitate the noting/updating experience, I came across [Dendron](https://www.dendron.so) and found it surprisingly congenial to my personal need. With it, I have gradually grown the habit of caching, linking back and extending my knowledge base.\n\n## Disclaimer\nThe notes are collections of information I found along the journey. I use backquote to denote sources, but I am likely to miss some references, so apology in advance. Also, they are my personal understandings, usually added when I first encounter the topic and will be updated only when I come across it again, so some of them could be incomplete or wrong."},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.86.1","enableFullHierarchyNoteTitle":false,"enableHandlebarTemplates":false,"templateHierarchy":"template"},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"writeStubs":false,"seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enablePrettyLinks":true,"assetsPrefix":"/my-personal-knowledge-cache","siteUrl":"https://ankbzpx.github.io","enableTaskNotes":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}