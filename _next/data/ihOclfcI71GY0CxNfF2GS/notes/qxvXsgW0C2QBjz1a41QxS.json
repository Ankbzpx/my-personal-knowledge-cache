{"pageProps":{"note":{"id":"qxvXsgW0C2QBjz1a41QxS","title":"GLES Draw Bitmap","desc":"","updated":1640019074507,"created":1640019061479,"custom":{},"fname":"rendering.android.gles-draw-bitmap","type":"note","vault":{"fsPath":"vault"},"contentHash":"7683449a762d64a7634f24e172a624db","links":[],"anchors":{},"children":[],"parent":"3sncjkcgi24nezsnwzoq2np","data":{}},"body":"<h1 id=\"gles-draw-bitmap\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#gles-draw-bitmap\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>GLES Draw Bitmap</h1>\n<pre><code>// Vertex Shader\nval vertexShaderCode =\n        \"attribute vec4 vPosition;\" +\n            \"attribute vec4 vInputTextureCoordinate;\" +\n            \"varying vec2 vTextureCoordinate;\" +\n            \"void main() {\" +\n            \"    gl_Position = vPosition;\" +\n            \"    vTextureCoordinate = vInputTextureCoordinate.xy;\" +\n            \"}\"\n\n// Fragment Shader\nval fragmentShaderCode =\n        \"varying highp vec2 vTextureCoordinate;\" +\n            \"uniform sampler2D logoFrame;\" +\n            \"void main() {\" +\n            \"    gl_FragColor = texture2D(logoFrame, vTextureCoordinate);\" +\n            \"}\"\n\nfun loadShader(type: Int, shaderCode: String): Int {\n        return GLES20.glCreateShader(type).also { shader ->\n            GLES20.glShaderSource(shader, shaderCode)\n            GLES20.glCompileShader(shader)\n        }\n    }\n\n// const\nprivate const val COORDS_PER_VERTEX = 3\nprivate const val COORDS_PER_TEXTURE = 2\nprivate const val DRAW_COUNT = 6\nprivate const val BYTES_PER_FLOAT = 4\nprivate const val BYTES_PER_INT = 4\nprivate const val BYTES_PER_COORDS = 2\n\n// bitmap to draw\nval Bitmap: Bitmap\n\n// texture for bitmap\nval textureHandle: IntBuffer.allocate(1)\n\n// OpenGL texture coordinate\n//\n// (0, 1) ---- (1, 1)\n//    |          |\n//    |          |\n//    |          |\n// (0, 0) ---- (1, 0)\n\nval squareCoords = floatArrayOf(\n        buttonLeftX, topRightY, 0.0f, // top left\n        buttonLeftX, buttonLeftY, 0.0f, // bottom left\n        topRightX, buttonLeftY, 0.0f, // bottom right\n        topRightX, topRightY, 0.0f // top right\n    )\n\nval quadVertexHandle = ByteBuffer.allocateDirect(squareCoords.size * BYTES_PER_FLOAT).run {\n        order(ByteOrder.nativeOrder())\n        asFloatBuffer().apply {\n            put(squareCoords)\n            position(0)\n        }\n    }\n\nval drawOrderHandle: ShortBuffer\n    by lazy {\n        val drawOrder = shortArrayOf(0, 1, 2, 0, 2, 3)\n        ByteBuffer.allocateDirect(drawOrder.size * BYTES_PER_COORDS).run {\n            order(ByteOrder.nativeOrder())\n            asShortBuffer().apply {\n                put(drawOrder)\n                position(0)\n            }\n        }\n    }\n\n\n// create gl program\nvar program = GLES20.glCreateProgram().also {\n        GLES20.glAttachShader(it, loadShader(GLES20.GL_VERTEX_SHADER, vertexShaderCode))\n        GLES20.glAttachShader(it, loadShader(GLES20.GL_FRAGMENT_SHADER, fragmentShaderCode))\n        GLES20.glLinkProgram(it)\n    }\n\n// load bitmap into texture\nGLES20.glGenTextures(1, textureHandle)\nGLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureHandle[0])\nGLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR)\nGLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR)\nGLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, GLES20.GL_RGBA, bitmap, 0)\n\n// draw\nGLES20.glUseProgram(program)\nval vertexPosHandle = GLES20.glGetAttribLocation(program, \"vPosition\")\nGLES20.glEnableVertexAttribArray(vertexPosHandle)\nGLES20.glVertexAttribPointer(vertexPosHandle, COORDS_PER_VERTEX, GLES20.GL_FLOAT, false, COORDS_PER_VERTEX * 4, quadVertexHandle)\n\nval texturePosHandle = GLES20.glGetAttribLocation(program, \"vInputTextureCoordinate\")\nGLES20.glEnableVertexAttribArray(texturePosHandle)\nGLES20.glVertexAttribPointer(texturePosHandle, COORDS_PER_TEXTURE, GLES20.GL_FLOAT, false, COORDS_PER_TEXTURE * 4, textureHandle)\n\nGLES20.glEnable(GLES20.GL_BLEND)\nGLES20.glBlendFunc(GLES20.GL_ONE, GLES20.GL_ONE_MINUS_SRC_ALPHA)\n\nval logoHandle = GLES20.glGetUniformLocation(program, \"logoFrame\")\nGLES20.glActiveTexture(GLES20.GL_TEXTURE0)\nGLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureHandle[0])\nGLES20.glUniform1i(logoHandle, 0)\n\nGLES20.glDrawElements(GLES20.GL_TRIANGLES, DRAW_COUNT, GLES20.GL_UNSIGNED_SHORT, drawOrderHandle)\n\nGLES20.glDisableVertexAttribArray(vertexPosHandle)\nGLES20.glDisableVertexAttribArray(texturePosHandle)\nGLES20.glDisablbe(GLES20.GL_BLEND)\n\n// release\nGLES20.glDeleteTextures(1, textureHandle)\nGLES20.glDeleteProgram(program)\n</code></pre>","noteIndex":{"id":"o3PkEany5FTDLokev2jkJ","title":"Root","desc":"","updated":1656832289330,"created":1640014633146,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"1f4a8dbd787743b10f24422968be02a9","links":[],"anchors":{"history":{"type":"header","text":"History","value":"history","line":10,"column":0,"depth":2},"disclaimer":{"type":"header","text":"Disclaimer","value":"disclaimer","line":15,"column":0,"depth":2}},"children":["Vn1Ykq4aIagi0bhZowkgD","ja5HFaIxVEtbZoTklNXfZ","vnzxfoqb6aqbrqy247uonqo","jjlv4wd30bvf0r680o9ptbi","kok8aerdrzko8v4i6w6qtjx","hr8ruqfxd2miwldyehzz5zy","criy8usqjrguecufwb3k8z2","3x9f9wclumzxc23dzgraepy","sma2hkp8hvq9urmtk94qqwq","4bcvwahaynsox941d8dimxw","8u19znq05xj50ptse0fq8nj","hbcft05imtwxxtwk52nij1n","2vmt81onv3jf06ejwfusj30","npuhs4xvm0sa31rz2gcuff3","mwt2mrjm58oa3q2osoqwd64","yjnf5fuac95jbdmjj923hyh","17p3nbv4rvga83hhsz2idzp","8r1egy8mz3lp7ud9p8kcg8z","5gf8xb68r1y0kxumkvvmuez","d92qhaqtfbt7e4eximdnbht","r25bm5nuug9krur6ddqearm"],"parent":null,"data":{},"body":"\nMy personal knowledge cache using [Dendron](https://www.dendron.so)\n\n## History\nIt was during my first job, at the start-up company called PixelShift.AI, that I acquired most prominent skill as a software engineer-the ability to read source code. It opened up a new way of learning and my knowledge expanded rapidly ever since. Learning new things is thriving but noting them down cogently and organized is hard. I often found myself forget the context few month later, making the notes completely intelligible. Additionally, some notes need frequent update as my previous understanding could be parochial, antiquated or even erroneous.\n\nIn desperate attempt to facilitate the noting/updating experience, I came across [Dendron](https://www.dendron.so) and found it surprisingly congenial to my personal need. With it, I have gradually grown the habit of caching, linking back and extending my knowledge base.\n\n## Disclaimer\nThe notes are collections of information I found along the journey. I use backquote to denote sources, but I am likely to miss some references, so apology in advance. Also, they are my personal understandings, usually added when I first encounter the topic and will be updated only when I come across it again, so some of them could be incomplete or wrong."},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.86.1","enableFullHierarchyNoteTitle":false,"enableHandlebarTemplates":false,"templateHierarchy":"template"},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"writeStubs":false,"seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enablePrettyLinks":true,"assetsPrefix":"/my-personal-knowledge-cache","siteUrl":"https://ankbzpx.github.io","enableTaskNotes":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}